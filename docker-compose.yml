version: '3.4'

services:
  postgresql:
    image: postgres:latest
    container_name: postgresql
    networks:
      - sag
    ports:
      - "5432:5432"
    # environment:
    #   - POSTGRES_PASSWORD=Password123
    #   - POSTGRES_USER=postgres
    env_file:
      - environment.variables
    volumes:
      - postgres-volume:/var/lib/postgresql/data

  umserver:
    image: softwareag/universalmessaging-server:10.15
    container_name: umserver
    networks:
      - sag
    ports:
      - "9000:9000"
      - "9200:9200"
    volumes:
      - um-data-volume:/opt/softwareag/UniversalMessaging/server/umserver/data
      - um-conf-volume:/opt/softwareag/common/conf
      - ./license/um-license.xml:/opt/softwareag/UniversalMessaging/server/umserver/licence/licence.xml:ro
    healthcheck:
      interval: 5s
      retries: 12
      test: ["CMD-SHELL", "curl --silent http://localhost:9000/health/ | grep -q '\"ServerStatus\":\"OK\"'"]

  msr:
    container_name: msr
    image: staillansag/webmethods-microservicesruntime:10.15.0.9-qdt
    depends_on:
      - umserver
      - postgresql
    networks:
      - sag
    ports:
      - "5555:5555"
      - "5543:5543"
    env_file:
      - environment.variables
    volumes:
      - ./license/msr-license.xml:/opt/softwareag/IntegrationServer/config/licenseKey.xml:ro
      - ./application.properties:/opt/softwareag/IntegrationServer/application.properties
      - ./packages/qdtAccountManagement:/opt/softwareag/IntegrationServer/packages/qdtAccountManagement
      - ./packages/qdtBackendForFrontend:/opt/softwareag/IntegrationServer/packages/qdtBackendForFrontend
      - ./packages/qdtContactManagement:/opt/softwareag/IntegrationServer/packages/qdtContactManagement
      - ./packages/qdtReferenceData:/opt/softwareag/IntegrationServer/packages/qdtReferenceData
      - ./packages/qdtFramework:/opt/softwareag/IntegrationServer/packages/qdtFramework
    healthcheck:
      interval: 5s
      retries: 24
      test: ["CMD-SHELL", "curl -o /dev/null -s -w '%{http_code}' http://localhost:5555 | grep -qE '^(200|3[0-9]{2})$'"]

networks:
  sag:

volumes:
  postgres-volume:
  um-data-volume:
  um-conf-volume:
